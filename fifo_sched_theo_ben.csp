
-- channels and types

datatype state = idle|eager|waiting|active

nametype Id = {0,1,2,3}
nametype Timeslots = {1..10}
--name idle_task = 0

channel set_idle, set_waiting, set_active, start_task : Id
channel request: Id.Timeslots
channel clock

-- processes

-- TASK
-- States: eager, idle, waiting, active
-- property Identifier: id
-- property AusfÃ¼hrzeit: duration
-- wird von SYS gestartet
TASK(id, duration, state) =

  set_active?cur_task -> (

    if (state = idle and cur_task = id) then (
      request!id.duration ->
      TASK(id, duration, eager)
    ) else
      TASK(id, duration, idle) -- keep current state
  )

  [] ( set_waiting?cur_task ->

    if (state = eager and cur_task = id) then
      TASK(id, duration, waiting)
    else
      TASK(id, duration, eager) -- keep current state
  )

  [] ( set_active?active_task ->

    if (state = waiting and active_task = id) then
      TASK(id, duration, active)
    else
      TASK(id, duration, waiting) -- keep current state
  )

  [] ( set_idle?task_id ->

    if (state = active and task_id = id) then
      TASK(id, duration, idle)
    else
      TASK(id, duration, active) -- keep current state
  )

-- SCHED

-- kann beliebig viele Tasks schedulen: waiting_list unbschrÃ¤nkt

-- - task auf waiting list setzten, set_waiting benachrichtigen
-- - task wird aktiv, set_active an Task
-- - task wird desceduled, set_idle an Task

-- - Reaktion: task in waiting_list einreihen

-- Scheduler kennt aktive task
SCHED(active_task, time_left, waiting_list_ids, waiting_list_durations) =
  (
    -- add to waiting_list
    request?id.duration ->
    waiting_list_ids^id -> waiting_list_durations^duration->
    set_waiting!id
  )

  []

  (
    clock -> 

    if (time_left > 0) then
      SCHED(active_task, time_left-1, waiting_list_ids, waiting_list_durations)

    else
      -- deschedule task and schedule next task
      set_idle!active_task ->

      if (length(waiting_list_id) > 0) then
	set_active!head(waiting_list_ids)
        SCHED(head(waiting_list_ids), head(waiting_list_durations), tail(waiting_list_ids), tail(waiting_list_durations))
      else
        --TODO: magic numbers
	set_active!0
	SCHED(0, 0, waiting_list_ids, waiting_list_durations)
  )

CLOCK = clock -> CLOCK

SYS =
  (
    SCHED
      [| {| clock |} |]
    CLOCK
  )

  [| {| set_idle, set_waiting, set_active, start_task |} |]
 
  (
    (
--      TASK(0, 0, active)
    
 --     |||
    
      TASK(1, 3, idle)
    
      |||
    
      TASK(2, 5, idle)
    
      |||
    
      TASK(3, 6, idle)
    )

    |||

    RUN
  )

RUN = start_task(0) -> start_task(1) -> start_task(2) -> start_task(3)


-- tests

