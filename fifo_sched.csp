
-- channels and types

nametype Id = {0,1,2,3}
nametype Timeslots = {1..10}
datatype TaskStatus = idle|eager|waiting|active
channel set_idle, set_waiting, set_active, start_task : Id
channel request: Id.Timeslots
channel clock

-- processes

TASK(id, status, time) =
  status==idle & start_task?id -> request!id!time -> TASK(id, eager, time) []
  status==eager & set_waiting?id -> TASK(id, waiting, time) []
  status==waiting & set_active?id -> TASK(id, active, time) []
  status==active & set_idle?id -> TASK(id, idle, time) 

SCHED(waitingids, waitingtimes) = 
      request?id?time -> set_waiting!id -> SCHED_INSERT(waitingids ^ <id>, waitingtimes ^ <time>) []
      if #waitingids==0
       then clock -> SCHED(waitingids, waitingtimes)
       else clock -> SCHED_HASWAITING(waitingids, waitingtimes)

SCHED_INSERT(waitingids, waitingtimes) =
  if #waitingids==1
    then set_active!head(waitingids) -> SCHED(waitingids, waitingtimes)
    else SCHED(waitingids, waitingtimes)

SCHED_HASWAITING(waitingids, waitingtimes) =
  if head(waitingtimes)==0
    then set_idle!head(waitingids) -> SCHED_NEXT(tail(waitingids), tail(waitingtimes))
    else SCHED(waitingids, <head(waitingtimes)-1> ^ tail(waitingtimes))

SCHED_NEXT(waitingids, waitingtimes) =
  if #waitingids==0
    then SCHED(waitingids, waitingtimes)
    else set_active!head(waitingids) -> SCHED(waitingids, waitingtimes)

CLOCK = clock -> CLOCK

SYS = 
        (SCHED(<>, <>) [|{| clock |}|] CLOCK)
          [|{| set_waiting, set_active, set_idle, request |}|]
        (
          (||| tid:Id @ TASK(tid, idle, 5)) [|{| start_task |}|] (||| tid:Id @ START(tid))
        )

START(id) = start_task!id -> SKIP

-- tests
TEST = start_task.0 -> start_task.1 -> start_task.2 -> start_task.3 -> SKIP

assert SYS \ {| set_waiting, set_active, set_idle, clock, request |} [T= TEST



--nametype I = {0,1,2,3,4,5}
--channel trigger: I
--DOOF(tasks) = head(tasks)==4 & SKIP []
--              head(tasks)<4 & trigger.head(tasks) -> DOOF(<head(tasks)+1> ^ tail(tasks))
--SYS = DOOF(<1, 2, 3>)
--TEST = trigger.1 -> trigger.2 -> trigger.3 -> SKIP
--assert SYS [T= TEST 

